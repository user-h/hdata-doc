(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{384:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"_1-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[t._v("#")]),t._v(" 1. 数据类型")]),t._v(" "),s("ul",[s("li",[t._v("Number类型")])]),t._v(" "),s("p",[t._v("  MySQL中是没有Number类型的，但有int/decimal 类型，Oracle中的Number(5,1)对应MySQL中的decimal(5,1)，Number(5) 对应 int(5)。MySQL中的数字型类型比较多，分的也比较细，还有tinyint、smallint、mediumint、bigint等类型")]),t._v(" "),s("ul",[s("li",[t._v("varchar2(n)类型")])]),t._v(" "),s("p",[t._v("  MySQL中对应Oracle Varchar2(n)类型的替代类型是varchar(n)类型。")]),t._v(" "),s("ul",[s("li",[t._v("Date 类型")])]),t._v(" "),s("p",[t._v("  MySQL 中的日期时间类型有Date、Time、Datetime等类型，MySQL中Date类型仅表示日期(年-月-日)，Time类型仅表示时间（时:分:秒），而Datetime类型表示日期时间(年-月-日 时:分:秒)，Oracle中的Date类型和MySQL中的Datetime类型一致。")]),t._v(" "),s("h4",{attrs:{id:"_2-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数"}},[t._v("#")]),t._v(" 2. 函数")]),t._v(" "),s("ul",[s("li",[t._v("length(str)函数")])]),t._v(" "),s("p",[t._v("  Oracle中的length(str)是获取字符串长度的函数，MySQL 中对应的函数为char_length(str)。")]),t._v(" "),s("ul",[s("li",[t._v("sys_guid()函数")])]),t._v(" "),s("p",[t._v("  Oracle中可通过sys_guid()函数是生成随机序列，MySQL通过UUID()生成随机序列。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("时间格式化函数")]),t._v(" "),s("ul",[s("li",[t._v("时间转换为字符串 MySQL: date_format(NOW(),'%Y-%m-%d')   Oracle: to_char(sysdate, 'YYYY-MM-DD')")]),t._v(" "),s("li",[t._v("字符串转换为时间 MySQL: str_to_date('2019-01-01','%Y-%m-%d')   Oracle: to_date('2019-01-01', 'YYYY-MM-DD');")]),t._v(" "),s("li",[t._v("时分秒的函数转换 DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%s')   str_to_date('2019-01-01','%Y-%m-%d %H:%i:%s')")])]),t._v(" "),s("p",[s("span",{staticStyle:{color:"red"}},[t._v("注意: MySQL不能直接两个日期用减号相减, 它会去掉连接符转成数字进行计算, 结果没有任何意义")])])]),t._v(" "),s("li",[s("p",[t._v("条件函数 nvl()、nvl2()、decode()")]),t._v(" "),s("ul",[s("li",[t._v("nvl(col, 0)   Oralce函数: col为空，则返回值取0，否则取col   MySQL: ifnull(col, 0)")]),t._v(" "),s("li",[t._v("nvl2(expr1,expr2,expr3)   Oralce函数: 如果expr1不为null，则返回expr2，否则返回expr3   MySQL: if(expr1,expr2,expr3)")]),t._v(" "),s("li",[t._v("DECODE(value, val1, val2, val3)   Oralce函数: 如果value等于val1，则返回val2，否则返回val3   MySQL: if(value=val1, val2, val3)")]),t._v(" "),s("li",[t._v("DECODE(value, if1, val1, if2,val2,...,ifn, valn, val)   如果value等于if1，则返回val1，如果value等于if2，则返回value2...如果value等于ifn，则返回valn，否则返回val   MySQL: case when value=if1 then val1 when value=if2 then val2,,,when value=ifn then valn else val end")])])]),t._v(" "),s("li",[s("p",[t._v("trunc()函数")]),t._v(" "),s("ul",[s("li",[t._v("TRUNC(12.123)   Oracle: 返回整数(12)   MySQL: truncate(12.123, 0)")]),t._v(" "),s("li",[t._v("TRUNC(12.123, 2)   Oracle: 返回值保留2为小数(12.12)   MySQL: truncate(12.123, 2)")]),t._v(" "),s("li",[t._v("TRUNC(SYSDATE)   Oracle: 返回值为(2019-07-26 00:00:00)   MySQL: cast(now() as datetime)：返回值为(2019-07-26 14:11:38)")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("MySQL的cast函数语法为：CAST(xxx AS 类型) （可用类型为：二进制,同带binary前缀的效果:BINARY；字符型,可带参数:CHAR()；日期:DATE；时间:TIME；日期时间型: DATETIME；浮点数: DECIMAL；整数:SIGNED；无符号整数:UNSIGNED）")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("to_char() / to_number()")]),t._v(" "),s("ul",[s("li",[t._v("to_char(123)   Oracle: 数字123转为字符串123   MySQL: CAST(123 AS CHAR(3))")]),t._v(" "),s("li",[t._v("to_number('123')   Oracle: 字符串123转换为数字类型   MySQL: 对应的函数为cast('123' as SIGNED)；")])])]),t._v(" "),s("li",[s("p",[t._v("sysdate")])])]),t._v(" "),s("p",[t._v("  sysdate   Oracle: 返回当前日期+时间   MySQL: now()")]),t._v(" "),s("h4",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("ul",[s("li",[t._v("引号")])]),t._v(" "),s("p",[t._v("  MySQL可识别双引号和单引号（反引号`为字段名），Oracle只能识别单引号（双引号为字段名）。")]),t._v(" "),s("ul",[s("li",[t._v("字符串连接符")])]),t._v(" "),s("p",[t._v("  Oracle: 可用'||'来连接多个字符串（concat只能连接两个字符串）  MySQL: concat()函数可连接多个字符串")]),t._v(" "),s("ul",[s("li",[t._v("ROWNUM")])]),t._v(" "),s("p",[t._v("  Oracle可通过rownum获取前n条记录，MySQL通过limit来获取前n条记录（Oracle中rownum作为where条件的一部分，而MySQL中limit不是where条件的一部分）")]),t._v(" "),s("ul",[s("li",[t._v("空数据排序(nulls first 和nulls last)")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- null值排在最前")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" FW_DEPARTMENT A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" NULLS "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FIRST")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- null值排在最后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" FW_DEPARTMENT A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" NULLS "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LAST")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- MySQL 可通过IF和ISNULL函数达到相同的效果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- null值排在最后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" FW_DEPARTMENT A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ISNULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- null值排在最前")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" FW_DEPARTMENT A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ISNULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REMARK "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v("\n")])])]),s("ul",[s("li",[t._v("全关联")])]),t._v(" "),s("p",[t._v("MySQL不支持full join （需通过join + union方式实现）")]),t._v(" "),s("ul",[s("li",[t._v("递归查询(start with connect by prior)")])]),t._v(" "),s("p",[t._v("MySQL不支持(start with connect by prior)的这种递归查询，但可以通过自定义函数来实现。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Oracle 递归查询 查询部门ID为‘1111’的所有子部门（包含自身）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" FW_DEPARTMENT\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" DEPID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONNECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" PRIOR DEPID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PARENTDEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Oracle 递归查询 查询部门ID为‘1111’的所有父部门（包含自身）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" FW_DEPARTMENT\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" DEPID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONNECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" PRIOR PARENTDEPID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- MySQL 先创建fun_getDepIDList函数，用于查询部门ID字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FUNCTION")]),t._v(" fun_getDepIDList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rootId "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURNS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" pTemp "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" cTemp "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" pTemp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" cTemp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("rootId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHILE")]),t._v(" cTemp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DO")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" pTemp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("CONCAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" GROUP_CONCAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" cTemp "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fw_department\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FIND_IN_SET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PARENTDEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHILE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" pTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询部门ID为‘1111’的所有子部门（包含自己）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fw_department\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" FIND_IN_SET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fun_getDepIDList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询部门ID为‘1111’的所有父部门(包含自己)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fw_department\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" FIND_IN_SET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fun_getDepIDList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("merge into")])]),t._v(" "),s("p",[t._v("MySQL不支持（merge into），但提供的replace into 和on duplicate key update可实现相似的功能。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Oracle merge into (有则修改，无则新增)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" TMPDEPTAB A\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),t._v(" DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈哈'")]),t._v(" DEPNAME "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" DUAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" B\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPNAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPNAME\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DEPNAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEPNAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- MySQL replace into (特点：1、先删后增； 2、插入/更新的表必须有主键或唯一索引；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 3、未修改/新增的数据项，如果必填，则必须有默认值)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 1、由于是先删后增，所以需要满足以下2个条件之一：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--      1.要么必填项有默认值； ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--      2.要么插入/更新时为没有默认值的必填项赋值， 否则新增时会报错。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 2、表中需要有主键或唯一索引，否则下面语句如果执行多次，表中会出现重复数据。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("replace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" fw_department"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("PARENTDEPID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEPNO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEPNAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111111'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1234'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈哈'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- MySQL on duplicate key update (特点：1、插入/更新的表必须有主键或唯一索引；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 2、未修改/新增的数据项，如果必填，则必须有默认值)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" fw_department"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("parentdepid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("depno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("depname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111111'")]),t._v(" depid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v(" parentdepid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e12'")]),t._v(" depno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈哈哈哈'")]),t._v(" depname\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fw_department\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("duplicate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" parentdepid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentdepid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tdepno"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tdepname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("with")])]),t._v(" "),s("p",[t._v("Oracle 中可用with来构建一个临时表，MySQL8.0+也支持")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/lanmuhhh2015/article/details/97763615",target:"_blank",rel:"noopener noreferrer"}},[t._v("源地址"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);