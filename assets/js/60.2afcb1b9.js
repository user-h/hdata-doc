(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{390:function(t,e,n){"use strict";n.r(e);var s=n(3),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"进入客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进入客户端"}},[t._v("#")]),t._v(" 进入客户端")]),t._v(" "),e("p",[t._v("启动： "),e("code",[t._v("redis-server redis.conf")])]),t._v(" "),e("p",[t._v("客户端： "),e("code",[t._v("redis-cli")])]),t._v(" "),e("p",[t._v("查看端口占用： "),e("code",[t._v("netstat -tunpl|grep 6379")])]),t._v(" "),e("p",[t._v("退出客户端： "),e("code",[t._v("exit")])]),t._v(" "),e("h2",{attrs:{id:"_1-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[t._v("#")]),t._v(" 1.数据类型")]),t._v(" "),e("h3",{attrs:{id:"_1-string-字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-string-字符串"}},[t._v("#")]),t._v(" （1）String(字符串)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("set xxx aaa     //设置xxx\nget xxx     //获取xxx\ndel xxx     //删除xxx\nmset name1 111 name2 222 name3 333 name4 444    //设置多个\nmget name1 name2 name3    //查看多个\nexists xxx     //查看是否存在\ntype aaa      //查看value的数据类型\nrandomkey     //从当前库中随机返回一个key\nFLUSHdb     //清空数据 \nFLUSHALL     //清空所有\n")])])]),e("h3",{attrs:{id:"_2-hash-哈希"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash-哈希"}},[t._v("#")]),t._v(" （2）Hash(哈希)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("赋值：\nHSET KEY  FIELD  VALUE    //为指定的KEY，设定FIELD/VALUE  \nHMSET  KEY  FIELD VALUE [FIELD1,VALUE1]…… 同时将多个 field-value (域-值)对设置到哈希表 key 中。\n\n取值：\nHGET KEY FIELD   //获取存储在HASH中的值，根据FIELD得到VALUE\nHMGET key field[field1]      //获取key所有给定字段的值\nHGETALL key                 //返回HASH表中所有的字段和值\nHKEYS key   //获取所有哈希表中的字段\nHVALS key   //获取所有哈希表中的值\nHLEN key   //获取哈希表中字段的数量\n\n删除语法：\nHDEL KEY field1[field2]    //删除一个或多个HASH表字段\n")])])]),e("h3",{attrs:{id:"_3-list-列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-list-列表"}},[t._v("#")]),t._v(" （3）List(列表)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("LPUSH key value1 [value2]     // 将一个或多个值插入到列表头部\nRPUSH key value1 [value2]    // 在列表中添加一个或多个值\nBLPOP key1 [key2 ] timeout    // 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\nBRPOP key1 [key2 ] timeout    // 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\nLINSERT key BEFORE|AFTER pivot value    // 在列表的元素前或者后插入元素\nLINDEX key index    // 通过索引获取列表中的元素\nLLEN key     // 获取列表长度\nLRANGE key start stop    //获取列表指定范围内的元素\n")])])]),e("h3",{attrs:{id:"_4-set-集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-set-集合"}},[t._v("#")]),t._v(" （4）Set(集合)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SADD key member1 [member2]    // 向集合添加一个或多个成员\nSMEMBERS key    // 返回集合中的所有成员\nSISMEMBER key member    // 1表示存在，0表示不存在或该key本身就不存在（无论集合中有多少元素都可以极速地返回结果）\nSREM key member1 [member2]    // 移除集合中一个或多个成员\nSINTER key1 [key2]      //返回给定所有集合的交集\nSDIFF key1 [key2]     // 返回给定所有集合的差集（属于key1不属于key2的集合）\nSUNION key1 [key2]     // 返回所有给定集合的并集\nSCARD key    //获取集合中成员的数量\nsdiffstore destination key1 [key2]    // 将key1、key2相差的成员存储在destination中\nsinterstore destination key1 [key2]     //将返回的交集存储在destination中\nsunionstore destination key1 [key2]     //将返回的并集存储在destination中\n")])])]),e("h3",{attrs:{id:"_5-zset-sorted-set-有序集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-zset-sorted-set-有序集合"}},[t._v("#")]),t._v(" （5）Zset(sorted set：有序集合)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ZADD key score1 member1 [score2 member2]    // 向有序集合添加一个或多个成员，或者更新已存在成员的分数\nZRANGE key start stop [WITHSCORES]     // 通过索引区间返回有序集合指定区间内的成员\nZCOUNT key min max    // 计算在有序集合中指定区间分数的成员数\nZREM key member [member ...]    // 移除有序集合中的一个或多个成员\nZCARD key    // 获取有序集合的成员数\nZINCRBY key increment member    // 有序集合中对指定成员的分数加上增量 increment \nZSCORE key member    // 返回有序集中，成员的分数值\nZRANK key member    // 返回有序集合中指定成员的索引\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]    // 通过分数返回有序集合指定区间内的成员\nZINTERSTORE destination numkeys key [key ...]    //计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中\nZUNIONSTORE destination numkeys key [key ...]    //计算给定的一个或多个有序集的并集，并存储在新的 key 中\n\n")])])]),e("h3",{attrs:{id:"_6-代码练习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码练习"}},[t._v("#")]),t._v(" （6） 代码练习")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class App \n{\n    public static void main( String[] args )\n    {\n    \tJedis jedis = new Jedis("8.8.8.8",6379);\n    \t//jedis.flushAll();\n        //System.out.println( "Hello World!" + jedis.ping());\n        /*****1.字符串(String)*****/\n//    \tjedis.set("name1", "aaa");\n//        System.out.println(jedis.get("name1"));\n//    \tjedis.del("name1");\n//    \t\n//    \tjedis.mset("name1","aaa","name2","bbb","name3","ccc");\n//    \tSystem.out.println(jedis.mget("name1","name2","name3"));\n//    \t\n//    \tSystem.out.println(jedis.exists("name1"));\n//    \tSystem.out.println(jedis.exists("name","name0","name1","name2","name3"));\n//    \tSystem.out.println(jedis.keys("*"));\n//    \tSystem.out.println(jedis.type("name1"));\n//    \tSystem.out.println(jedis.randomKey());\n//    \tSystem.out.println(jedis.flushDB());\n//    \tSystem.out.println(jedis.get("name1"));\n//    \tSystem.out.println(jedis.flushAll());\n//    \tSystem.out.println(jedis.randomKey());\n    \t\n    \t/****2.哈希(Hash)******/\n    \t/*\n    \tHashMap<String,String> hmap = new HashMap<String,String>();\n    \thmap.put("name5", "eee");\n    \thmap.put("name4", "ddd");\n    \thmap.put("id", "666");\n    \t// 设置值\n    \tjedis.hset("user", "name6", "fff");\n    \tjedis.hmset("user", hmap);\n    \t// 取值\n    \tSystem.out.println("hget:\\t" + jedis.hget("user", "name4"));\n    \tSystem.out.println("hmget:\\t" + jedis.hmget("user", "name4","name5","name6"));\n    \tSystem.out.println("hgetAll:\\t" + jedis.hgetAll("user"));\n    \tSystem.out.println("keys:\\t" + jedis.keys("*"));\n    \tSystem.out.println("hkeys:\\t" + jedis.hkeys("user"));\n    \tSystem.out.println("hvals:\\t" + jedis.hvals("user"));\n    \tSystem.out.println("hlen:\\t" + jedis.hlen("user"));\n    \t// 删除field\n    \tSystem.out.println("hdel\\t" + jedis.hdel("user","name4"));\n    \tSystem.out.println("hdel\\t" + jedis.hdel("user","name5","name6"));\n    \tSystem.out.println(jedis.hgetAll("user"));\n    \t// 清空\n    \tSystem.out.println(jedis.flushAll());\n    \tSystem.out.println(jedis.hgetAll("user"));\n    \t*/\n\n    \t\n    \t/*******3.列表List(类似于栈???)*********/\n    \t/*\n    \t// 放值\n    \tjedis.lpushx("list", "999");\n    \tjedis.lpush("list", "hhh","ggg","iii");\t\t//1或多到  开始\n    \tjedis.rpush("list", "kkk","jjj");\t\t\t//1或多到  末尾\n    \tjedis.lpushx("list", "666");\t\t\t\t// 插入已存在列表头部\n    \t// 取值\n    \tSystem.out.println(jedis.lrange("list", 0, 10));\t//获取指定范围元素\n    \tSystem.out.println(jedis.blpop("list","5"));\t\t//移出 第一个元素 等待超时\n    \tSystem.out.println(jedis.brpop("list", "5"));\t\t//移出 最后一个元素 等待超时\n    \tSystem.out.println(jedis.lindex("list", 3));\t\t//索引获取元素\n    \tSystem.out.println(jedis.llen("list"));\t\t\t\t//获取列表长度\n    \tSystem.out.println(jedis.lrange("list", 0, 10));\n    \t//清空\n    \tSystem.out.println(jedis.flushAll());\n    \t*/\n    \t\n    \t\n    \t/********4.集合(Set)****************/\n    \t/*\n    \t// 放值\n    \tjedis.sadd("set", "lll", "nnn", "mmm" ,"ooo");\n    \t// 取值\n    \tSystem.out.println(jedis.smembers("set"));\t\t// 所有元素\n    \tSystem.out.println(jedis.sismember("set", "ooo"));\t\t\t// key(value)是否存在\n    \tSystem.out.println(jedis.sismember("sett", "ooo"));\n    \tSystem.out.println(jedis.srem("set","ooo","mmm"));\t\t// 移除\n    \tSystem.out.println(jedis.smembers("set"));\n    \t// 运算\n    \tjedis.sadd("set", "set");\n    \tjedis.sadd("sett", "lll", "nnn", "mmm", "ooo", "sett");\n    \tSystem.out.println(jedis.sinter("set", "sett"));\t\t// 交集\n    \tSystem.out.println(jedis.sdiff("set", "sett"));\t\t\t// 差集\n    \tSystem.out.println(jedis.sunion("set", "sett"));\t\t// 并集\n    \t\n    \tSystem.out.println(jedis.scard("set"));\t\t// 元素数目\n    \tSystem.out.println(jedis.scard("sett"));\t\t// 元素数目\n    \t//清空\n    \tSystem.out.println(jedis.flushAll());\n    \t*/\n    \t\n    \t/********5.有序集合sorted set(zset)*************/\n    \tHashMap<String,Double> scoremap = new HashMap<String, Double>(); \n    \tscoremap.put("vvv", 0.22);\n    \tscoremap.put("ppp", 0.16);\n    \tscoremap.put("sss", 0.19);\n    \tscoremap.put("qqq", 0.17);\n    \tscoremap.put("www", 0.23);\n    \tscoremap.put("rrr", 0.18);\n    \tscoremap.put("uuu", 0.21);\n    \tscoremap.put("ttt", 0.20);\n    \t// 放值\n    \tjedis.zadd("zset", scoremap);\t\t// 添加元素或更新分数\n    \tjedis.zadd("zset", 0.24, "xxx");\n    \t// 元素查找修改\n    \tSystem.out.println(jedis.zrange("zset", 0, 10));\t\t// 根据索引返回区间\n    \tSystem.out.println(jedis.zcount("zset", 0.18, 0.21));\t\t// 根据分数返回元素数\n    \tSystem.out.println(jedis.zrem("zset", "sss", "ppp"));\t\t// 移除元素\n    \tSystem.out.println(jedis.zcard("zset"));\t\t\t\t\t// 元素数目\n    \tSystem.out.println(jedis.zincrby("zset", 1, "www"));\t\t// 分数增量\n    \tSystem.out.println(jedis.zscore("zset", "www"));\t\t// 返回分数值\n    \tSystem.out.println(jedis.zrank("zset", "www"));\t\t// 返回元素索引\n    \tSystem.out.println(jedis.zrangeByScore("zset", 0, 2));\t\t// 根据分数返回元素区间\n    \t//清空\n    \tSystem.out.println(jedis.flushAll());\n    \t\n    \t\n        jedis.close();\n    }\n}\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);