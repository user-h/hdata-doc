(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{339:function(a,n,t){"use strict";t.r(n);var e=t(3),c=function(a){a.options.__data__block__={mermaid_382ee14c:'classDiagram\n\tclass Duck{\n\t  +quack()\n\t  +swim()\n\t  +display()\n\t  +fly()\n    }\n\n    class MallardDuck{\n\t  +display("绿头")\n    }\n\n    class RedHeadDuck{\n\t  +display("红头")\n    }\n\n\tclass RubberDuck{\n\t  +display("橡皮鸭")\n\t  +quack("覆盖为吱吱叫")\n    }\n\n\tDuck <|-- MallardDuck : 继承\n\tDuck <|-- RedHeadDuck : 继承\n\tDuck <|-- RubberDuck  : 继承\n',mermaid_382ee188:"classDiagram\n\tclass Duck{\n\t  +swim()\n\t  +display()\n    }\n\n\tclass Flyable{\n\t  <<Interface>>\n\t  +fly()\n\t}\n\n\tclass Quackable{\n\t  <<Interface>>\n\t  +Quack()\n\t}\n\n    class MallardDuck{\n\t  +fly()\n\t  +display()\n    }\n\n    class RedHeadDuck{\n\t  +fly()\n\t  +display()\n    }\n\n\tclass RubberDuck{\n\t  +display()\n\t  +quack()\n    }\n\n\tDuck <|-- MallardDuck : 继承\n\tFlyable <|.. MallardDuck : 实现\n\tQuackable <|.. MallardDuck : 实现\n\tDuck <|-- RedHeadDuck : 继承\n\tFlyable <|.. RedHeadDuck : 实现\n\tQuackable <|.. RedHeadDuck : 实现\n\tDuck <|-- RubberDuck  : 继承\n\tQuackable <|.. RubberDuck  : 实现\n",mermaid_382ee1c7:'classDiagram\n\tclass Duck{\n\t  FlyBehavior flyBehavior\n\t  QuackBehavior quackBehavior\n\t  +performFly(flyBehavior.fly)\n\t  +performQuack()\n\t  +swim()\n\t  +display()\n    }\n\n\tclass FlyBehavior{\n\t  <<Interface>>\n\t  +fly()\n\t}\n\n\tclass FlyWithWings{\n\t  +fly("实现鸭子飞行")\n\t}\n\n\tclass FlyNoWay{\n\t  +fly("什么都不做")\n\t}\n\n\tclass QuackBehavior{\n\t  <<Interface>>\n\t  +quack()\n\t}\n\n\tclass Quack{\n\t  +quack("呱呱叫")\n\t}\n\n\tclass SQuack{\n\t  +quack("吱吱叫")\n\t}\n\n\tclass MuteQuack{\n\t  +quack("什么也不做")\n\t}\n\n    class MallardDuck{\n\t  +MallardDuck("实例化飞行和叫声类")\n\t  +display()\n    }\n\n    class RedHeadDuck{\n\t  +RedHeadDuck("实例化飞行和叫声类")\n\t  +display()\n    }\n\n\tclass RubberDuck{\n\t  +RubberDuck("实例化飞行和叫声类")\n\t  +display()\n    }\n\n\tFlyBehavior <|.. FlyWithWings : 实现\n\tFlyBehavior <|.. FlyNoWay : 实现\n\tQuackBehavior <|.. Quack : 实现\n\tQuackBehavior <|.. SQuack : 实现\n\tQuackBehavior <|.. MuteQuack : 实现\n\n\tDuck o-- FlyBehavior : 聚合\n\tDuck o-- QuackBehavior : 聚合\n\n\tDuck <|-- MallardDuck : 继承\n\tDuck <|-- RedHeadDuck : 继承\n\tDuck <|-- RubberDuck  : 继承\n',mermaid_382ee1e6:'classDiagram\n\tclass Character{\n\t  <<abstract>>\n\t  WeaponBehavior weapon\n\t  +fight() void\n\t  +setWeapon(WeaponBehavior w) void\n    }\n\tclass King{\n\t  +fight() void\n    }\n\tclass Queen{\n\t  +fight() void\n    }\n\tclass Troll{\n\t  +fight() void\n    }\n\tclass Knight{\n\t  +fight() void\n    }\n\n\tclass WeaponBehavior{\n\t  <<Interface>>\n\t  +useWeapon() void\n    }\n\tclass KnifeBehavior{\n\t  +useWeapon("使用匕首刺杀") void\n    }\n\tclass BowAndArrowBehavior{\n\t  +useWeapon("使用弓箭射击") void\n    }\n\tclass AxeBehavior{\n\t  +useWeapon("使用斧头劈砍") void\n    }\n\tclass SwordBehavior{\n\t  +useWeapon("使用宝剑挥舞") void\n    }\n\n\tCharacter <|-- King : 继承\n\tCharacter <|-- Queen : 继承\n\tCharacter <|-- Troll : 继承\n\tCharacter <|-- Knight : 继承\n\n\tWeaponBehavior <|.. KnifeBehavior : 实现\n\tWeaponBehavior <|.. BowAndArrowBehavior : 实现\n\tWeaponBehavior <|.. AxeBehavior : 实现\n\tWeaponBehavior <|.. SwordBehavior : 实现\n\n\tCharacter --\x3e WeaponBehavior\n'}},r=Object(e.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"策略模式-strategy-pattern"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式-strategy-pattern"}},[a._v("#")]),a._v(" 策略模式（Strategy Pattern）")]),a._v(" "),n("p",[n("span",{staticStyle:{color:"red"}},[n("strong",[a._v("策略模式")]),a._v("定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。")])]),a._v(" "),n("h4",{attrs:{id:"鸭子飞和叫"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#鸭子飞和叫"}},[a._v("#")]),a._v(" 鸭子飞和叫")]),a._v(" "),n("p",[n("strong",[a._v("为了给鸭子增加飞行能力")])]),a._v(" "),n("blockquote",[n("p",[a._v("问题：在超类增加方法导致橡皮鸭也会飞了\n解决方案：在子类中覆盖掉父类方法，又会导致其他问题（一旦创建新的鸭子类，就必须检查飞行和叫的方法）")])]),a._v(" "),n("Mermaid",{attrs:{id:"mermaid_382ee14c",graph:a.$dataBlock.mermaid_382ee14c}}),n("blockquote",[n("p",[a._v("使用接口呢，会导致")]),a._v(" "),n("ol",[n("li",[a._v("代码不能复用")]),a._v(" "),n("li",[a._v("飞行动作有区别，就要每个类的方法都有不同的实现")])])]),a._v(" "),n("Mermaid",{attrs:{id:"mermaid_382ee188",graph:a.$dataBlock.mermaid_382ee188}}),n("blockquote",[n("p",[a._v("针对接口编程 真正含义为针对超类编程。即Animal animal = new Dog()的形式\n优点：")]),a._v(" "),n("ol",[n("li",[a._v("飞行和叫的动作可以被其他对象复用")]),a._v(" "),n("li",[a._v("可以新增行为，不会影响到行为类，也不会影响到鸭子类")])]),a._v(" "),n("p",[a._v("缺点：构造器实例化对象，是对具体实现编程，有待改进")])]),a._v(" "),n("Mermaid",{attrs:{id:"mermaid_382ee1c7",graph:a.$dataBlock.mermaid_382ee1c7}}),n("p",[n("span",{staticStyle:{color:"red"}},[n("strong",[a._v("改进：")]),a._v(" 创建 FlyBehavior、QuackBehavior 的 get、set 方法，使运行时可以动态的设定其行为，即在创建鸭子对象时传入行为对象来设置其行为。（有点类似于函数编程通过参数传入一段逻辑的感觉？？？）")])]),a._v(" "),n("h4",{attrs:{id:"小游戏-动作冒险游戏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小游戏-动作冒险游戏"}},[a._v("#")]),a._v(" 小游戏：动作冒险游戏")]),a._v(" "),n("p",[a._v("有游戏角色和使用武器行为的类，每个角色一次只能使用一种武器，但是可以在游戏过程中换武器。")]),a._v(" "),n("Mermaid",{attrs:{id:"mermaid_382ee1e6",graph:a.$dataBlock.mermaid_382ee1e6}})],1)}),[],!1,null,null,null);"function"==typeof c&&c(r);n.default=r.exports}}]);