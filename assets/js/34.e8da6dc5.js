(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{362:function(t,e,o){"use strict";o.r(e);var a=o(3),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("这个是在之前的基础上搭建\n"),e("strong",[t._v("hadoop完全分布式搭建:https://www.cnblogs.com/Hephaestus/p/12213719.html")]),t._v(" "),e("strong",[t._v("hadoop高可用搭建:https://www.cnblogs.com/Hephaestus/p/12420370.html")]),t._v("\n集群规划:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("namenode")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("datanode")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("journalnode")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("Zookeeper(必须为奇数)")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("hadoop100")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是(nn2)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("hadoop101")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是(nn1)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("hadoop102")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("hadoop103")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是")])])])]),t._v(" "),e("h2",{attrs:{id:"关于zookeeper的节点为什么是奇数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于zookeeper的节点为什么是奇数"}},[t._v("#")]),t._v(" 关于Zookeeper的节点为什么是奇数")]),t._v(" "),e("p",[e("strong",[t._v("(参考链接:https://www.cnblogs.com/ysocean/p/9860529.html#_label0)")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("容错率")]),t._v("\n需要保证集群能够有半数进行投票")])]),t._v(" "),e("blockquote",[e("p",[t._v("2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉，但是相对于 单节点服务器，2台服务器还有两个单点故障，所以直接排除了。\n3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉\n4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉\n5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("防脑裂")]),t._v("\n脑裂集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的leader节点，导致原有的集群出现多个leader节点的情况，这就是脑裂。")])]),t._v(" "),e("blockquote",[e("p",[t._v("3台服务器，投票选举半数为1.5，一台服务裂开，和另外两台服务器无法通行，这时候2台服务器的集群（2票大于半数1.5票），所以可以选举出leader，而 1 台服务器的集群无法选举。\n4台服务器，投票选举半数为2，可以分成 1,3两个集群或者2,2两个集群，对于 1,3集群，3集群可以选举；对于2,2集群，则不能选择，造成没有leader节点。\n5台服务器，投票选举半数为2.5，可以分成1,4两个集群，或者2,3两集群，这两个集群分别都只能选举一个集群，满足zookeeper集群搭建数目。")])]),t._v(" "),e("p",[t._v("以上分析，我们从容错率以及防止脑裂两方面说明了3台服务器是搭建集群的最少数目，4台发生脑裂时会造成没有leader节点的错误")]),t._v(" "),e("h2",{attrs:{id:"_1-解压安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-解压安装"}},[t._v("#")]),t._v(" 1. 解压安装:")]),t._v(" "),e("p",[t._v("下载地址:\n"),e("strong",[t._v("解压: "),e("code",[t._v("tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /soft/module/")]),t._v(" (自己要安装的目录)")]),t._v(" "),e("strong",[t._v("文件夹重命名: "),e("code",[t._v("mv apache-zookeeper-3.5.7 zookeeper-3.5.7")])])]),t._v(" "),e("h2",{attrs:{id:"_2-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置"}},[t._v("#")]),t._v(" 2.\t配置")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("1)\t进入到zookeeper-3.5.7/conf目录下 "),e("code",[t._v("cp zoo_sample.cfg zoo.cfg")]),t._v(" 编辑 "),e("code",[t._v("vim zoo.cfg")]),t._v(",加入")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dataDir=/soft/module/zookeeper-3.5.7/zkData\ndataLogDir=/soft/module/zookeeper-3.5.7/logs\nclientPort=2181\n\n########hadoop101、102、103为 3个datanode节点########\n# 注: 文件可以这样写(不用0.0.0.0)(前提是把/etc/hosts前两行注释掉,否则会产生冲突)\nserver.1=hadoop101:2888:3888\nserver.2=hadoop102:2888:3888\nserver.3=hadoop103:2888:3888\n")])])]),e("p",[e("strong",[t._v("分发文件 "),e("code",[t._v("xsync.sh zookeeper-3.5.7")])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("进入到zookeeper-3.5.7/conf目录下 ,"),e("code",[t._v("mkdir zkData")]),t._v("(上面配置文件zoo.cfg的路径)  "),e("code",[t._v('echo "1" > myid')]),t._v("写入内容1(注意和配置文件中的server.1对应)")]),t._v(" "),e("strong",[t._v("在其它节点分别执行操作 "),e("code",[t._v('echo "2" > myid')]),t._v(" "),e("code",[t._v('echo "3" > myid')]),t._v("(和zoo.cfg对应!!!  id必须在集群环境中服务器标识中是唯一的，且大小在1～255之间)")])])]),t._v(" "),e("h2",{attrs:{id:"_3-集群启动-测试服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-集群启动-测试服务"}},[t._v("#")]),t._v(" 3.\t集群启动 测试服务")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("启动 "),e("code",[t._v("bin/zkServer.sh start")])])]),t._v(" "),e("li",[e("strong",[t._v("查看状态 "),e("code",[t._v("bin/zkServer.sh status")])]),t._v(" "),e("img",{attrs:{src:"https://img2020.cnblogs.com/blog/1798447/202003/1798447-20200305171334884-1216608613.png",alt:""}}),t._v("\n这种情况的一种可能是Zookeeper集群有节点未启动")]),t._v(" "),e("li",[e("strong",[t._v("连接zookeeper服务 "),e("code",[t._v("bin/zkCli.sh -server 8.8.8.103:2181")]),t._v(" (自己的ip、端口号和zoo.cfg对应)")])])]),t._v(" "),e("blockquote",[e("p",[t._v("拒绝连接\n1).防火墙没关\n2).配置文件问题\n3).zk集群不是正常的关闭 (例如执行kill 命令zk的进程)\n解决: 直接修改clientPort端口号，然后再启动，再关闭，把clientPort修改回来\n注意，使用zookeeper需正常停止！！！不然，重启linux都不一定能解决问题！\n4).主机IP和端口号一定要正确!!! (我就是端口号错了…)")])]),t._v(" "),e("h2",{attrs:{id:"_4-ha故障自动转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-ha故障自动转换"}},[t._v("#")]),t._v(" 4.\tHA故障自动转换")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_1-修改集群所有节点-namenode和datanode-的hdfs配置文件和核心配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-修改集群所有节点-namenode和datanode-的hdfs配置文件和核心配置文件"}},[t._v("#")]),t._v(" 1)\t修改集群所有节点(NameNode和DataNode)的hdfs配置文件和核心配置文件:")]),t._v(" "),e("code",[t._v("vim /soft/module/hadoop-2.9.2/etc/hadoop/hdfs-site.xml")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- 当namnode故障，是否自动启动另一个namenode(默认值为false)--\x3e\n<property>\n\t\t\x3c!--这个之前好像错了 --\x3e\n        <name>dfs.ha.automatic-failover.enabled </name>\n        <value>true</value>\n</property>\n")])])]),e("p",[e("code",[t._v("vim /soft/module/hadoop-2.9.2/etc/hadoop/core-site.xml")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- 指定zookeeper地址 --\x3e\n<property>\n    <name>ha.zookeeper.quorum</name>\n    \x3c!-- 端口号和配置文件zoo.cfg 对应 --\x3e\n    <value>hadoop101: 2181,hadoop102: 2181,hadoop103: 2181</value>\n</property>\n")])])]),e("p",[t._v("查看 "),e("code",[t._v("mapred-site.xml")]),t._v(" "),e("code",[t._v("yarn-site.xml")]),t._v("主机名啥的不要出错\n"),e("strong",[t._v("分发配置文件: "),e("code",[t._v("xsync /soft/module/hadoop-2.9.2/etc/hadoop")])])]),t._v(" "),e("h3",{attrs:{id:"_2-启动测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动测试"}},[t._v("#")]),t._v(" 2)\t启动测试")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[e("code",[t._v("jps")]),t._v("查看是否关闭所有服务, 没有的话关闭")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("在所有节点上删除 "),e("code",[t._v("dfs/data dfs/name tmp logs")]),t._v("目录")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("所有datanode节点启动zookeeper集群 "),e("code",[t._v("./bin/zkServer.sh start")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("格式化zk集群: nn1上执行 "),e("code",[t._v("bin/hdfs zkfc -formatZK")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("所有datanode节点启动journalnode集群 "),e("code",[t._v("./sbin/hadoop-daemon.sh start journalnode")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("格式化namenode: nn1上执行 "),e("code",[t._v("./bin/hdfs namenode -format")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("启动datanode和namenode")]),t._v("\n所有datanode节点执行 "),e("code",[t._v("./sbin/hadoop-daemon.sh start datanode")]),t._v("\nnn1 执行 "),e("code",[t._v("./sbin/hadoop-daemon.sh start namenode")]),t._v("\nnn2 执行 "),e("code",[t._v("./bin/hdfs namenode -bootstrapStandby")]),t._v(" "),e("code",[t._v("./sbin/hadoop-daemon.sh start namenode")]),t._v("\n此时可以再UI界面看到\n"),e("img",{attrs:{src:"https://img2020.cnblogs.com/blog/1798447/202003/1798447-20200305172410970-1093843624.png",alt:""}})])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("启动zkfc服务")]),t._v("\n在nn1和nn2执行 "),e("code",[t._v("./sbin/hadoop-daemon.sh start zkfc")]),t._v("\n这时namenode1和namenode2会自动选举出active节点, 可以看到\n"),e("img",{attrs:{src:"https://img2020.cnblogs.com/blog/1798447/202003/1798447-20200305172454651-892827770.png",alt:""}})])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("验证")]),t._v("\n处于active状态的节点 执行 "),e("code",[t._v("kill -9 xxxxx")]),t._v("(jps查看的namenode进程id), 可以看到\n"),e("img",{attrs:{src:"https://img2020.cnblogs.com/blog/1798447/202003/1798447-20200305172534096-750710390.png",alt:""}})])])])])}),[],!1,null,null,null);e.default=n.exports}}]);